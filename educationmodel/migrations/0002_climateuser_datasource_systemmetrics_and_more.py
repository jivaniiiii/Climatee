# Generated by Django 4.2.24 on 2025-09-08 15:42

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('educationmodel', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClimateUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('analyst', 'Climate Analyst'), ('viewer', 'Data Viewer')], default='viewer', max_length=20)),
                ('organization', models.CharField(blank=True, max_length=200)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('is_active_session', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='climate_users', related_query_name='climate_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='climate_users', related_query_name='climate_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('source_type', models.CharField(choices=[('satellite', 'Satellite Imagery'), ('weather_station', 'Weather Station'), ('sensor', 'Environmental Sensor'), ('ocean_buoy', 'Ocean Buoy'), ('air_quality', 'Air Quality Monitor')], max_length=20)),
                ('location_lat', models.FloatField()),
                ('location_lon', models.FloatField()),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('installation_date', models.DateTimeField()),
                ('last_maintenance', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SystemMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cpu_usage', models.FloatField()),
                ('memory_usage', models.FloatField()),
                ('disk_usage', models.FloatField()),
                ('network_io', models.FloatField()),
                ('active_users', models.IntegerField()),
                ('data_processing_rate', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AlterModelTable(
            name='signup',
            table='educationmodel_signup',
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to='educationmodel.climateuser')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tickets', to='educationmodel.climateuser')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('model_type', models.CharField(choices=[('anomaly_detection', 'Anomaly Detection'), ('trend_prediction', 'Trend Prediction'), ('correlation_analysis', 'Correlation Analysis'), ('weather_forecast', 'Weather Forecasting')], max_length=30)),
                ('version', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('accuracy_score', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('training_data_period_start', models.DateTimeField()),
                ('training_data_period_end', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educationmodel.climateuser')),
            ],
        ),
        migrations.CreateModel(
            name='ClimateAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('temperature_anomaly', 'Temperature Anomaly'), ('extreme_weather', 'Extreme Weather Event'), ('air_quality', 'Air Quality Alert'), ('sea_level_rise', 'Sea Level Rise'), ('system_failure', 'System/Sensor Failure')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('threshold_value', models.FloatField(blank=True, null=True)),
                ('actual_value', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='educationmodel.climateuser')),
                ('data_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='educationmodel.datasource')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClimateData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_type', models.CharField(choices=[('temperature', 'Temperature'), ('humidity', 'Humidity'), ('pressure', 'Atmospheric Pressure'), ('wind_speed', 'Wind Speed'), ('wind_direction', 'Wind Direction'), ('precipitation', 'Precipitation'), ('co2_level', 'CO2 Concentration'), ('ozone_level', 'Ozone Level'), ('sea_level', 'Sea Level'), ('ice_coverage', 'Ice Coverage')], max_length=20)),
                ('value', models.FloatField()),
                ('unit', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField()),
                ('quality_score', models.FloatField(default=1.0)),
                ('is_anomaly', models.BooleanField(default=False)),
                ('processed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('data_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='educationmodel.datasource')),
            ],
            options={
                'indexes': [models.Index(fields=['data_source', 'timestamp'], name='educationmo_data_so_ce9194_idx'), models.Index(fields=['data_type', 'timestamp'], name='educationmo_data_ty_5f84f1_idx'), models.Index(fields=['is_anomaly'], name='educationmo_is_anom_332ce1_idx')],
            },
        ),
    ]
